emmip(m1,~gender.f:class.f:health.f)
emmip(m1,gender.f~class.f)
emmip(m1,gender.f~health.f)
#interaction
m<-aov(wage~gender.f+health.f+class.f+gender.f:health.f+gender.f:class.f+health.f:class.f+gender.f:class.f:health.f,data=dat)
summary(m)
m2<-emmeans(m,~class.f:health.f:gender.f)
emmip(m2,gender.f~class.f)
emmip(m2,gender.f~health.f)
mn<-aov(wage~gender.f+health.f+class.f,data=dat)
m1<-emmeans(mn,~class.f:health.f:gender.f)
m1
emmip(m1,gender.f~class.f)
emmip(m1,gender.f~health.f)
m2<-emmeans(m,~class.f:health.f:gender.f)
emmip(m2,gender.f~class.f)
emmip(m2,gender.f~health.f)
m<-aov(wage~gender.f+health.f+class.f+gender.f:health.f+gender.f:class.f+health.f:class.f,data=dat)
summary(m)
m2<-emmeans(m,~class.f:health.f:gender.f)
emmip(m2,gender.f~class.f)
emmip(m2,gender.f~health.f)
sd(2,2,2,2)
sd(c(2,2,2,2))
wages<-read_xlsx(dat<-read_xlsx("C:/Users/egwue/Onedrive/Documents/Lab/Rproject1.xlsx")
wages
wages<-read_xlsx(dat<-read_xlsx("C:/Users/egwue/Onedrive/Documents/Lab/Rproject1.xlsx")
wages
view(wages)
library(readxl)
wages<-read_xlsx(dat<-read_xlsx("C:/Users/egwue/Onedrive/Documents/Lab/Rproject1.xlsx")
View(dat)
wages<-read_xlsx(read_xlsx("C:/Users/egwue/Onedrive/Documents/Lab/Rproject1.xlsx")
wages<-read_xlsx("C:/Users/egwue/Onedrive/Documents/Lab/Rproject1.xlsx")
library(readxl)
wages<-read_xlsx("c:/Users/egwue/Onedrive/Documents/Lab/Rproject1.xlsx")
wages
wages$Gender<-as.factor(wages$Gender)
levels(wages$Gender)<-c("male","female")
#Education
wages$Education<-as.factor(wages$Education)
levels(wages$Education)<-c("high","low")
#service
wages$service<-as.factor(wages$service)
levels(wages$service)<-c("under 2","2 to 5","6 to 10","10+")
#Job category
wages$JobCategory<-as.factor(wages$JobCategory)
levels(wages$JobCategory)<-c("management","professional","assistant professional","clerical")
#sector
wages$Sector<-as.factor(wages$Sector)
levels(wages$Sector)<-c("Industry","Construction & Transport","Finance","Health and education")
wages
model_wage<-lm(Annual_Earnings~No_of_Weeks+Gender+age+Education+service+WeeklyHours+JobCategory+Sector+Time_paid_employ,data=wages)
model_wage<-lm(Annual_Earnings~No_Of_Weeks+Gender+age+Education+service+WeeklyHours+JobCategory+Sector+Time_paid_employ,data=wages)
summary(model_wage)
library(readxl)
library(tidyverse)
library(caret)
library(car)
wages<-read_xlsx("c:/Users/egwue/Onedrive/Documents/Lab/Rproject1.xlsx")
head(project)
wages<-read_xlsx("c:/Users/egwue/Onedrive/Documents/Lab/Rproject1.xlsx")
head(wages)
# ensuring the top 800 rows were selected
wages<-wages[1:800,]
head(wages)
str(wages)
#check for missing values
colSums(is.na(wages))
#recode the variables
#Gender
wages$Gender<-as.factor(wages$Gender)
levels(wages$Gender)<-c("male","female")
#Education
wages$Education<-as.factor(wages$Education)
levels(wages$Education)<-c("high","low")
#service
wages$service<-as.factor(wages$service)
levels(wages$service)<-c("under 2","2 to 5","6 to 10","10+")
#Job category
wages$JobCategory<-as.factor(wages$JobCategory)
levels(wages$JobCategory)<-c("management","professional","assistant professional","clerical")
#sector
wages$Sector<-as.factor(wages$Sector)
levels(wages$Sector)<-c("Industry","Construction & Transport","Finance","Health and education")
#linear regression
model_wage<-lm(Annual_Earnings~No_of_Weeks+Gender+age+Education+service+JobCategory+Sector+Time_paid_employ,data=wages)
#linear regression
model_wage<-lm(Annual_Earnings~No_Of_Weeks+Gender+age+Education+service+JobCategory+Sector+Time_paid_employ,data=wages)
summary(model_wage)
xres<-rstandard(model_wage)
vif(model_wage)
Back_model_wage<-lm(Annual_Earnings~No_of_Weeks+Gender+Education+service+JobCategory+Sector+Time_paid_employ,data=wages)
Back_model_wage<-lm(Annual_Earnings~No_Of_Weeks+Gender+Education+service+JobCategory+Sector+Time_paid_employ,data=wages)
summary(Back_model_wage)
par(mfrow = c(2, 2))
plot(model_wage)
#linear regression
model_wage<-lm(Annual_Earnings~No_Of_Weeks+Gender+age+Education+service+JobCategory+Sector+Time_paid_employ,data=wages)
summary(model_wage)
model_res<-rstandard(model_wage)
hist(model_res)
par(mfrow = c(2, 2))
plot(model_wage)
Back_model_wage<-lm(Annual_Earnings~No_Of_Weeks+Gender+Education+service+JobCategory+Sector+Time_paid_employ,data=wages)
summary(Back_model_wage)
Res_Back_model<-rstandard(Back_model_wage)
hist(Res_Back_model)
#linear regression
model_wage<-lm(Annual_Earnings~No_Of_Weeks+Gender+age+Education+service+JobCategory+Sector+Time_paid_employ,data=wages)
summary(model_wage)
model_res<-rstandard(model_wage)
hist(model_res)
source("~/.active-rstudio-document")
outliers <- boxplot(wages$Annual_Earnings, plot=FALSE)$out
##remove the outliers
wages_clean<- wages[-which(wages$Annual_Earnings %in% outliers),]
# Split the data into training and test set
set.seed(123)
training.samples <- wages_clean$Annual_Earnings %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- wages_clean[training.samples, ]
test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~.,data=train.data)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+Gender+Education+WeeklyHours+service+JobCategory,data = train.data)
anova(model_reduced,model_full)
##summary of the reduced model
summary(model_reduced)
wages<-read_xlsx("c:/Users/egwue/Onedrive/Documents/Lab/Rproject1.xlsx")
head(wages)
# ensuring the top 800 rows were selected
wages<-wages[1:800,]
head(wages)
str(wages)
#check for missing values
colSums(is.na(wages))
#recode the variables
#Gender
wages$Gender.f<-as.factor(wages$Gender)
levels(wages$Gender)<-c("male","female")
#Education
wages$Education.f<-as.factor(wages$Education)
levels(wages$Education)<-c("high","low")
#service
wages$service.f<-as.factor(wages$service)
levels(wages$service)<-c("under 2","2 to 5","6 to 10","10+")
#Job category
wages$JobCategory.f<-as.factor(wages$JobCategory)
levels(wages$JobCategory)<-c("management","professional","assistant professional","clerical")
#sector
wages$Sector.f<-as.factor(wages$Sector)
levels(wages$Sector)<-c("Industry","Construction & Transport","Finance","Health and education")
#linear regression
model_wage<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+age+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
summary(model_wage)
model_res<-rstandard(model_wage)
hist(model_res)
Back_model_wage<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
summary(Back_model_wage)
Res_Back_model<-rstandard(Back_model_wage)
hist(Res_Back_model)
outliers <- boxplot(wages$Annual_Earnings, plot=FALSE)$out
##remove the outliers
wages_clean<- wages[-which(wages$Annual_Earnings %in% outliers),]
View(wages_clean)
# Split the data into training and test set
set.seed(123)
training.samples <- wages_clean$Annual_Earnings %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- wages_clean[training.samples, ]
test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=train.data)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+Gender+Education+WeeklyHours+service+JobCategory,data = train.data)
anova(model_reduced,model_full)
##summary of the reduced model
summary(model_reduced)
# Split the data into training and test set
set.seed(123)
training.samples <- wages_clean$Annual_Earnings %>%
createDataPartition(p = 0.8, list = FALSE)
train.data  <- wages_clean[training.samples, ]
test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=train.data)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+Gender+Education+WeeklyHours+service+JobCategory+Time_paid_employ,data = train.data)
anova(model_reduced,model_full)
##summary of the reduced model
summary(model_reduced)
View(train.data)
View(test.data)
Back_model_wage<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
summary(Back_model_wage)
Res_Back_model<-rstandard(Back_model_wage)
hist(Res_Back_model)
plot(Back_model_wage)
# full model
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+Time_paid_employ,data = wages)
anova(model_reduced,model_full)
# full model
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+Time_paid_employ,data = wages)
anova(model_reduced,model_full)
Anova(Back_model_wage,"III")
Anova(Back_model_wage,"iii")
Anova(Back_model_wage,"111")
library(readxl)
library(tidyverse)
library(caret)
library(car)
library(jtools)
Anova(Back_model_wage,type="III")
result<-Anova(Back_model_wage,type="III")
summ(result)
result<-Anova(Back_model_wage,type="III")
summary(result)
result<-Anova(Back_model_wage,type="III")
Anova(Back_model_wage,type="III")
View(training.samples)
# Split the data into training and test set
#set.seed(123)
#training.samples <- wages_clean$Annual_Earnings %>%
#  createDataPartition(p = 0.8, list = FALSE)
#train.data  <- wages_clean[training.samples, ]
#test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+Gender+Education+WeeklyHours+service+JobCategory+Time_paid_employ,data = wages)
anova(model_reduced,model_full)
##summary of the reduced model
summary(model_reduced)
View(wages)
#linear regression
model_wage<-lm(Annual_Earnings~No_Of_Weeks+WeeklyHours+Gender.f+age+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
summary(model_wage)
model_res<-rstandard(model_wage)
hist(model_res)
par(mfrow = c(2, 2))
plot(model_wage)
vif(model_wage)
Back_model_wage<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
summary(Back_model_wage)
Res_Back_model<-rstandard(Back_model_wage)
hist(Res_Back_model)
plot(Back_model_wage)
# Split the data into training and test set
#set.seed(123)
#training.samples <- wages_clean$Annual_Earnings %>%
#  createDataPartition(p = 0.8, list = FALSE)
#train.data  <- wages_clean[training.samples, ]
#test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+WeeklyHours+Time_paid_employ,data = wages)
anova(model_reduced,model_full)
# Split the data into training and test set
#set.seed(123)
#training.samples <- wages_clean$Annual_Earnings %>%
#  createDataPartition(p = 0.8, list = FALSE)
#train.data  <- wages_clean[training.samples, ]
#test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages,na.action=na.omit())
# Split the data into training and test set
#set.seed(123)
#training.samples <- wages_clean$Annual_Earnings %>%
#  createDataPartition(p = 0.8, list = FALSE)
#train.data  <- wages_clean[training.samples, ]
#test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages,na.action=na.omit)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+WeeklyHours+Time_paid_employ,data = wages)
anova(model_reduced,model_full)
# Split the data into training and test set
#set.seed(123)
#training.samples <- wages_clean$Annual_Earnings %>%
#  createDataPartition(p = 0.8, list = FALSE)
#train.data  <- wages_clean[training.samples, ]
#test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages,na.action=na.pass)
# Split the data into training and test set
#set.seed(123)
#training.samples <- wages_clean$Annual_Earnings %>%
#  createDataPartition(p = 0.8, list = FALSE)
#train.data  <- wages_clean[training.samples, ]
#test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages,na.action=na.exclude)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+WeeklyHours+Time_paid_employ,data = wages)
anova(model_reduced,model_full)
# Split the data into training and test set
#set.seed(123)
#training.samples <- wages_clean$Annual_Earnings %>%
#  createDataPartition(p = 0.8, list = FALSE)
#train.data  <- wages_clean[training.samples, ]
#test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+WeeklyHours+Time_paid_employ,data = wages)
#anova(model_reduced,model_full)
model_reduced
##summary of the reduced model
summary(model_reduced)
# Split the data into training and test set
#set.seed(123)
#training.samples <- wages_clean$Annual_Earnings %>%
#  createDataPartition(p = 0.8, list = FALSE)
#train.data  <- wages_clean[training.samples, ]
#test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+WeeklyHours+Time_paid_employ+Education,data = wages)
#anova(model_reduced,model_full)
model_reduced
##summary of the reduced model
summary(model_reduced)
# Split the data into training and test set
#set.seed(123)
#training.samples <- wages_clean$Annual_Earnings %>%
#  createDataPartition(p = 0.8, list = FALSE)
#train.data  <- wages_clean[training.samples, ]
#test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+WeeklyHours+Time_paid_employ+Education,data = wages)
anova(model_reduced,model_full)
model_reduced
##summary of the reduced model
summary(model_reduced)
# Define training control
set.seed(123)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model_val<- train(Annual_Earnings~No_Of_Weeks+Gender+Education+WeeklyHours+service+JobCategory,data = wages,method = "lm",trControl = train.control)
# Define training control
set.seed(123)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model_val<- train(Annual_Earnings~No_Of_Weeks+Gender+Education+WeeklyHours+service+JobCategory,data = na.omit(wages),method = "lm",trControl = train.control)
# Summarize the results
print(model_val)
# Define training control
set.seed(123)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model_val<- train(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data = na.omit(wages),method = "lm",trControl = train.control)
# Summarize the results
print(model_val)
# Split the data into training and test set
#set.seed(123)
#training.samples <- wages_clean$Annual_Earnings %>%
#  createDataPartition(p = 0.8, list = FALSE)
#train.data  <- wages_clean[training.samples, ]
#test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+WeeklyHours+Time_paid_employ+Education,data = wages)
anova(model_reduced,model_full)
#model_reduced
#summary of the reduced model
summary(model_reduced)
Anova(model_full,type='iii')
Anova(model_full,type='III')
# Split the data into training and test set
#set.seed(123)
#training.samples <- wages_clean$Annual_Earnings %>%
#  createDataPartition(p = 0.8, list = FALSE)
#train.data  <- wages_clean[training.samples, ]
#test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~No_Of_Weeks+Age+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
# Split the data into training and test set
#set.seed(123)
#training.samples <- wages_clean$Annual_Earnings %>%
#  createDataPartition(p = 0.8, list = FALSE)
#train.data  <- wages_clean[training.samples, ]
#test.data <- wages_clean[-training.samples, ]
#refit the model after removing the outliers
model_full<-lm(Annual_Earnings~No_Of_Weeks+age+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+WeeklyHours+Time_paid_employ+Education,data = wages)
anova(model_reduced,model_full)
#model_reduced
#summary of the reduced model
summary(model_reduced)
Anova(model_full,type='III')
#full Model
model_full<-lm(Annual_Earnings~No_Of_Weeks+age+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+WeeklyHours+Time_paid_employ+Education,data = wages)
anova(model_reduced,model_full)
#summary of the reduced model
summary(model_reduced)
#full Model
model_full<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
#reduced model
model_reduced<-lm(Annual_Earnings~No_Of_Weeks+WeeklyHours+Time_paid_employ+Education,data = wages)
anova(model_reduced,model_full)
#summary of the reduced model
summary(model_reduced)
Anova(model_full,type='III')
model_WAGES<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+service.f+JobCategory.f+Time_paid_employ,data=wages)
summary(model_WAGES)
Res_Final_model<-rstandard(model_WAGES)
hist(Res_Final_model)
model_WAGES<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+Sector.f.f+JobCategory.f+Time_paid_employ,data=wages)
model_WAGES<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+Sector.f+JobCategory.f+Time_paid_employ,data=wages)
summary(model_WAGES)
Res_Final_model<-rstandard(model_WAGES)
hist(Res_Final_model)
model_WAGES<-lm(log(Annual_Earnings)~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+Sector.f+JobCategory.f+Time_paid_employ,data=wages)
summary(model_WAGES)
Res_Final_model<-rstandard(model_WAGES)
hist(Res_Final_model)
#linear regression
model_wage<-lm(Annual_Earnings~No_Of_Weeks+WeeklyHours+Gender.f+age+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages)
summary(model_wage)
model_res<-rstandard(model_wage)
hist(model_res)
plot(fitted(model_wage),model_res)
# Define training control
set.seed(123)
train.control <- trainControl(method = "cv", number = 10)
# Train the model
model_val<- train(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+JobCategory.f+Sector.f+Time_paid_employ,data = na.omit(wages),method = "lm",trControl = train.control)
# Summarize the results
print(model_val)
model_WAGES<-lm(Annual_Earnings~No_Of_Weeks+Gender.f+WeeklyHours+Education.f+Sector.f+JobCategory.f+Time_paid_employ,data=wages)
summary(model_WAGES)
Res_Final_model<-rstandard(model_WAGES)
hist(Res_Final_model)
library(robustbase)
robust_model<-lmrob(Annual_Earnings~No_Of_Weeks+WeeklyHours+Gender.f+age+Education.f+service.f+JobCategory.f+Sector.f+Time_paid_employ,data=wages,control=lmrob.control(max.it=100))
summary(robust_model)
install.packages("tinytex")
library(tinytex)
https://www.latex-project.org/get/
!get https://www.latex-project.org/get/
install_github('yihui/knitr', upgrade = TRUE)
remotes::install_github('yihui/knitr', upgrade = TRUE)
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
install.packages(c("bit", "bslib", "callr", "data.table", "digest", "emmeans", "evaluate", "future", "future.apply", "ggplot2", "gmp", "jsonlite", "lme4", "lubridate", "magic", "maptools", "markdown", "Matrix", "minqa", "modelr", "pkgload", "plyr", "processx", "ps", "RcppEigen", "recipes", "rmarkdown", "sp", "stringi", "vctrs", "xfun", "yaml"))
getwd()
setwd("C:/Users/egwue/OneDrive/Documents/GitHub/Discriminant-Analysis/docs")
getwd()
knitr::opts_chunk$set(echo = TRUE)
# Include relevant packages here. You may add any extra ones you need.
require(tidyverse)
require(GGally)
require(corrplot)
require(kableExtra)
require(dplyr)
require(bartMachine)
# Load in the data set.
HDD<-read.csv("HeartDiseaseData.csv")
getwd()
setwd("C:/Users/egwue/OneDrive/Documents/GitHub/Functional-data-analysis/docs")
knitr::opts_chunk$set(echo = TRUE)
# Loading the data
Raw_Force<-read.csv("Raw_Force.csv")
install.packages("emmeans")
# Loading Libraries
library(imputeTS)
library(readr)
library(ggplot2)
library(fda)
library(ggplot2)
library(dplyr)
library(tidyr)
